//
// Usage:
// SMILExtract -C thisconfig.conf -I input.wav -csvoutput out.csv -csvoutput_nz out_nz.csv  
//
// (separate output files because func config needs to differentiate between two types
//  of lld and cCsvSource cannot read only select columns)
//

[componentInstances:cComponentManager]
; single threaded, better for small inputs
nThreads=1
; no internal dataMemory level output (change to 1,2,3,4 for output)
printLevelStats=0
instance[dataMemory].type=cDataMemory
instance[wave_source].type=cWaveSource
instance[frames60].type=cFramer
instance[windows60].type=cWindower
instance[fft60].type=cTransformFFT
instance[fft_mag60].type=cFFTmagphase
instance[hps].type=cSpecScale
instance[pitch_shs].type=cPitchShs
instance[jitter_shimmer].type=cPitchJitter
instance[pitch_smooth].type=cPitchSmoother
instance[frames25].type=cFramer
instance[frames25_pe].type=cVectorPreemphasis
instance[windows25].type=cWindower
instance[fft25].type=cTransformFFT
instance[fft_mag25].type=cFFTmagphase
instance[mel_spec1].type=cMelspec
instance[mfcc].type=cMfcc
instance[mel_spec2].type=cMelspec
; instance[mel_spec2_log].type=cVectorOperation
instance[fft25_resample].type=cSpecResample
instance[lpc].type=cLpc
instance[lsp].type=cLsp
instance[energy].type=cEnergy
instance[lld_concat].type=cVectorConcat
instance[energy_de].type=cDeltaRegression
instance[pitch_smooth_de].type=cDeltaRegression
instance[csv_sink].type=cCsvSink
instance[csv_sink_nz].type=cCsvSink

// wav input reader
[wave_source:cWaveSource]
writer.dmLevel = wave_source
buffersize_sec = 5.0
filename = \cm[inputfile(I){test.wav}:name of input file]
start = \cm[start{0}:audio start position in seconds]
end = \cm[end{-1}:audio end position in seconds, -1 for end of file]
monoMixdown = 1
outFieldName = pcm

// frames of size 60ms and shift 10ms
[frames60:cFramer]
reader.dmLevel=wave_source
writer.dmLevel=frames60
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 5
frameMode = fixed
frameSize = 0.060
frameStep = 0.010
frameCenterSpecial = left
noPostEOIprocessing = 1

// gaussian windows
[windows60:cWindower]
reader.dmLevel=frames60
writer.dmLevel=windows60
winFunc = gauss
sigma = 0.25
gain = 1.0

// fft, with complex output (alternating real and imaginary parts)
[fft60:cTransformFFT]
reader.dmLevel=windows60
writer.dmLevel=fft60

// fft, in magnitude and phase format
[fft_mag60:cFFTmagphase]
reader.dmLevel=fft60
writer.dmLevel=fft_mag60
magnitude = 1
phase = 0

// harmonic product spectrum, intermediate output for pitch 
[hps:cSpecScale]
reader.dmLevel=fft_mag60
writer.dmLevel=hps
scale=octave
sourceScale = lin
specSmooth = 0
auditoryWeighting = 0
specEnhance = 0
minF = 20
maxF = -1
nPointsTarget = 0
specSmooth = 1
specEnhance = 1
auditoryWeighting = 1
interpMethod = spline

// fundamental frequency, computed with sub-harmonic sampling
[pitch_shs:cPitchShs]
reader.dmLevel=hps
writer.dmLevel=pitch_shs
inputFieldSearch = fftMag_octScale
F0raw = 0
voicingClip = 0
voicingC1=0
scores=1
voicing=1
nCandidates = 6
octaveCorrection = 0
greedyPeakAlgo = 1
compressionFactor = 0.85
nHarmonics = 15
voicingCutoff = 0.70
maxPitch = 620
minPitch = 52

// smoothed pitch from basic f0 candidates
[pitch_smooth:cPitchSmoother]
reader.dmLevel=pitch_shs
writer.dmLevel=pitch_smooth
F0raw = 0
F0final = 1
F0finalEnv = 0
voicingFinalUnclipped = 0
medianFilter0 = 0
postSmoothingMethod = median
postSmoothing = 5
octaveCorrection = 0
writer.levelconf.nT=1000
writer.levelconf.isRb=0
writer.levelconf.growDyn=1

// jitter and shimmer from smoothed pitch
[jitter_shimmer:cPitchJitter]
reader.dmLevel = wave_source
writer.dmLevel = jitter_shimmer
writer.levelconf.growDyn = 1
writer.levelconf.isRb = 0
writer.levelconf.nT = 1000
copyInputName = 1
F0reader.dmLevel = pitch_smooth
F0field = F0final
searchRangeRel = 0.200000
jitterLocal = 1
jitterDDP = 1
jitterLocalEnv = 0
jitterDDPEnv = 0
shimmerLocal = 1
shimmerLocalEnv = 0
onlyVoiced = 0
;periodLengths = 0
;periodStarts = 0
inputMaxDelaySec = 1
usePeakToPeakPeriodLength = 0
shimmerUseRmsAmplitude = 0
minCC = 0.5
minNumPeriods = 2

// frames of size 25ms and shift 10ms
[frames25:cFramer]
reader.dmLevel=wave_source
writer.dmLevel=frames25
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 5
frameMode = fixed
frameSize = 0.025
frameStep = 0.010
frameCenterSpecial = left
noPostEOIprocessing = 1

// signal preemphasized to better handle the small frame size
[frames25_pe:cVectorPreemphasis]
reader.dmLevel=frames25
writer.dmLevel=frames25_pe
k=0.97

// hamming windows
[windows25:cWindower]
reader.dmLevel=frames25_pe
writer.dmLevel=windows25
winFunc = ham
gain = 1.0

// fft, with complex output (alternating real and imaginary parts)
[fft25:cTransformFFT]
reader.dmLevel=windows25
writer.dmLevel=fft25

// fft, in magnitude and phase format
[fft_mag25:cFFTmagphase]
reader.dmLevel=fft25
writer.dmLevel=fft_mag25
magnitude = 1
phase = 0

// mel spectrum from 0 to 8kHz, for mfcc
[mel_spec1:cMelspec]
reader.dmLevel=fft_mag25
writer.dmLevel=mel_spec1
htkcompatible = 0
usePower = 1
lofreq = 20
hifreq = 8000
nBands = 26
specScale = mel
bwMethod = lr

// mel-frequency cepstral coefficients 0 to 14
[mfcc:cMfcc]
reader.dmLevel = mel_spec1
writer.dmLevel = mfcc
htkcompatible = 0
firstMfcc = 0
lastMfcc = 14
cepLifter = 22
copyInputName = 0

// mel-frequency bands 0 to 7 (distributed over 0 to 8kHz)
[mel_spec2:cMelspec]
reader.dmLevel=fft_mag25
writer.dmLevel=mel_spec2
htkcompatible = 0
usePower = 1
lofreq = 20
hifreq = 8000
nBands = 8
copyInputName = 0
nameAppend = mel_freq
specScale = mel
bwMethod = lr

// uncomment this to get log of mel-frequency bands
; [mel_spec2_log:cVectorOperation]
; reader.dmLevel=mel_spec2
; writer.dmLevel=mel_spec2_log
; operation = log
; copyInputName = 0
; nameAppend=logMelFreqBand

// resampling of the fft values to 11kHz (copied from IS10 conf, not sure why this is done)
[fft25_resample:cSpecResample]
reader.dmLevel=fft25
writer.dmLevel=fft25_resample
targetFs = 11000

// 8 linear predictive coding coefficients computed from resampled data
[lpc:cLpc]
reader.dmLevel=fft25_resample
writer.dmLevel=lpc
p=8
method = acf
saveLPCoeff = 1
lpGain = 0
saveRefCoeff = 0
residual = 0
forwardFilter = 0
lpSpectrum = 0

// line spectral pair frequencies from lpc coefficients
[lsp:cLsp]
reader.dmLevel=lpc
writer.dmLevel=lsp

// root mean square energy from frames
[energy:cEnergy]
reader.dmLevel=frames25
writer.dmLevel=energy
rms=1
log=0

// concatenation of low level descriptors
[lld_concat:cVectorConcat]
reader.dmLevel=energy;mfcc;mel_spec2;lsp
writer.dmLevel=lld_concat
writer.levelconf.growDyn = 1
writer.levelconf.isRb = 0
writer.levelconf.nT = 1000
includeSingleElementFields = 1

// first order delta coefficient of energy value
[energy_de:cDeltaRegression]
reader.dmLevel=energy
writer.dmLevel=energy_de
writer.levelconf.growDyn = 1
writer.levelconf.isRb = 0
writer.levelconf.nT = 1000
deltawin=2
blocksize=1

// first order delta coefficient of smoothed pitch
[pitch_smooth_de:cDeltaRegression]
reader.dmLevel=pitch_smooth
writer.dmLevel=pitch_smooth_de
writer.levelconf.growDyn = 1
writer.levelconf.isRb = 0
writer.levelconf.nT = 1000
deltawin=2
blocksize=1
onlyInSegments = 1
zeroSegBound = 1

// csv output writer for features allowing zero value
[csv_sink:cCsvSink]
reader.dmLevel = lld_concat;energy_de
filename=\cm[csvoutput{?}:output CSV file for features allowing zero value, set to a valid filename to enable this output sink, data is appended if file exists]
append=\cm[appendcsv{1}:set to 0 to disable appending to an existing csv parameter summary file, given by the csvoutput option]
frameIndex=0
frameTime=\cm[timestampcsv{0}:set to 1 to show timestamp as second column, default is 0, i.e. to suppress timestamp column]
; instanceName=\cm[instname(N){unknown}:instance name]
errorOnNoOutput = 1
printHeader = \cm[headercsv{0}:set to 1 to include header line with feature names, default is 0, i.e. to suppress header line]

// csv output writer for features for which zero value should be ignored
[csv_sink_nz:cCsvSink]
reader.dmLevel = jitter_shimmer;pitch_smooth;pitch_smooth_de
filename=\cm[csvoutput_nz{?}:output CSV file for features for which zero value should be ignored, set to a valid filename to enable this output sink, data is appended if file exists]
append=\cm[appendcsv_nz{1}:set to 0 to disable appending to an existing csv parameter summary file, given by the csvoutput option]
frameIndex=0
frameTime=\cm[timestampcsv_nz{0}:set to 1 to show timestamp as second column, default is 0, i.e. to suppress timestamp column]
; instanceName=\cm[instname_nz(N){unknown}:instance name]
errorOnNoOutput = 1
printHeader = \cm[headercsv_nz{0}:set to 1 to include header line with feature names, default is 0, i.e. to suppress header line]

