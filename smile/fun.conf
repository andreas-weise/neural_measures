//
// Usage:
// SMILExtract -C thisconfig.conf -I input.csv -J input_nz.csv -csvoutput output.csv 
//

[componentInstances:cComponentManager]
; single threaded, better for small inputs
nThreads=1
; no internal dataMemory level output (change to 1,2,3,4 for output)
printLevelStats=0
instance[dataMemory].type=cDataMemory
instance[csv_source].type=cCsvSource
instance[csv_source_nz].type=cCsvSource
instance[func].type=cFunctionals
instance[func_nz].type=cFunctionals
instance[func_concat].type=cVectorConcat
instance[csv_sink].type=cCsvSink

// csv input reader for features allowing zero value
[csv_source:cCsvSource]
writer.dmLevel = csv_source
filename = \cm[csv_input(I){test.wav}:name of input file for features allowing zero value]
writer.levelconf.growDyn = 1
writer.levelconf.isRb = 0
writer.levelconf.nT = 1000

// csv input reader for features for which zero value should be ignored
[csv_source_nz:cCsvSource]
writer.dmLevel = csv_source_nz
filename = \cm[csv_input_nz(J){test.wav}:name of input file for features for which zero value should be ignored]
writer.levelconf.growDyn = 1
writer.levelconf.isRb = 0
writer.levelconf.nT = 1000

// functionals for features allowing zero value
[func:cFunctionals]
reader.dmLevel=csv_source
writer.dmLevel=func
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 5
 ; frameSize and frameStep = 0 => functionals over complete input
 ; (NOTE: buffersize of lld and lld_de levels must be large enough!!)
frameMode = full
frameSize = 0
frameStep = 0
frameCenterSpecial = left
functionalsEnabled=Moments;Percentiles
Moments.variance = 0
Moments.stddev = 0
Moments.skewness = 0
Moments.kurtosis = 0
Moments.stddev = 1
Moments.amean = 1
Percentiles.quartiles = 0
Percentiles.iqr = 0
Percentiles.percentile = 0.01;0.99;0.50
Percentiles.pctlrange=0-1
nonZeroFuncts = 0

// functionals for features with potential zero values, run only on non-zero
[func_nz:cFunctionals]
reader.dmLevel=csv_source_nz
writer.dmLevel=func_nz
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 5
; frameSize and frameStep = 0 => functionals over complete input
; (NOTE: buffersize of input levels must be large enough!!)
frameMode = full
frameSize = 0
frameStep = 0
frameCenterSpecial = left
functionalsEnabled=Moments;Percentiles
Moments.variance = 0
Moments.stddev = 0
Moments.skewness = 0
Moments.kurtosis = 0
Moments.stddev = 1
Moments.amean = 1
Percentiles.quartiles = 0
Percentiles.iqr = 0
Percentiles.percentile = 0.01;0.99;0.50
Percentiles.pctlrange=0-1
nonZeroFuncts=1

// concatenation of functionals
[func_concat:cVectorConcat]
reader.dmLevel = func;func_nz
writer.dmLevel = func_concat
includeSingleElementFields = 1

// csv output writer
[csv_sink:cCsvSink]
reader.dmLevel = func_concat
filename=\cm[csvoutput{?}:output CSV file for summarised parameters, set to a valid filename to enable this output sink, data is appended if file exists]
append=\cm[appendcsv{1}:set to 0 to disable appending to an existing csv parameter summary file, given by the csvoutput option]
frameIndex=0
frameTime=\cm[timestampcsv{0}:set to 1 to show timestamp as second column, default is 0, i.e. to suppress timestamp column]
; instanceName=\cm[instname(N){unknown}:instance name]
errorOnNoOutput = 1
printHeader = \cm[headercsv{0}:set to 1 to include header line with feature names, default is 0, i.e. to suppress header line]

